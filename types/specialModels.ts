import { ExhibitType, CardType, UserType } from "./databaseModels";
import { CardSchema, ExhibitSchema, UserSchema } from "./databaseModels";
import * as z from "zod";

/**
 * This is a `User` object without the password field.
 */
export type UserData = Omit<UserType, "password">;
export const UserDataSchema = UserSchema.omit({ password: true });

/**
 * This is an `ExhibitType` object with the cards field populated with `CardType`
 * objects.
 */
export type PopulatedExhibit = ExhibitType & { cards: CardType[] };
export const PopulatedExhibitSchema = ExhibitSchema.extend({
    cards: z.array(CardSchema)
});

/**
 * This is an `ExhibitType` object without the `id` field, since the `id` is
 * generated by the database. Note that, as far as client-side code is concerned,
 * this type is interchangeable with `ExhibitType` because the `id` field is
 * ignored by the API's endpoints when creating a new exhibit anyway. 
 * 
 * Client code may opt to use `ExhibitType` instead of this type because `id` can 
 * be used as a unique key for components.
 */
export type ExhibitCreatable = Omit<ExhibitType, "id">;
export const ExhibitCreatableSchema = ExhibitSchema.omit({ id: true });

/**
 * This is a `CardType` object without the `id` and `exhibitId` fields, since
 * the `id` is generated by the database and the `exhibitId` is generated by the
 * API when creating a new exhibit.
 * 
 * Client code may opt to use `CardType` instead of this type because `id` can
 * be used as a unique key for components.
 */
export type CardCreatable = Omit<CardType, "id" | "exhibitId">;
export const CardCreatableSchema = CardSchema.omit({ 
    id: true, exhibitId: true 
});

/**
 * This is an `ExhibitCreatable` object with the `cards` field populated with
 * `CardCreatable` objects. I.e., neither the exhibit nor the cards have `id`s.
 */
export type PopulatedExhibitCreatable = ExhibitCreatable & { cards: CardCreatable[] };
export const PopulatedExhibitCreatableSchema = ExhibitCreatableSchema.extend({
    cards: z.array(CardCreatableSchema)
});
