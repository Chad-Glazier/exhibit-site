/**
 * The types for each Prisma Model are automatically generated by Prisma and importable
 * from "@prisma/client", and the corresponding Zod objects are also generated and
 * importable from "@/prisma/zod".
 * 
 * However, there is need for some special types of these models and their corresponding
 * Zod objects, so those types are manually defined here.
 */
import { Exhibit, Card } from "@prisma/client";
import { ExhibitSchema, CardSchema } from "@/prisma/zod";
import * as z from "zod";

/**
 * Used to represent an exhibit with its `cards` field populated by 
 * corresponding Card documents.
 */
export type PopulatedExhibit = Exhibit & { cards: Card[] };
/**
 * A Zod object to represent a PopulatedExhibit.
 */
export const PopulatedExhibitSchema = ExhibitSchema.extend({
    cards: z.array(CardSchema)
});

/**
 * A special version of the `Exhibit` type that omits the `id` field so that it can
 * be inserted with an auto-incremented `id`.
 */
export type ExhibitCreatable = Omit<Exhibit, "id">;
/**
 * A Zod object to represent `ExhibitCreatable`.
 */
export const ExhibitCreatableSchema = ExhibitSchema.omit({ id: true });

/**
 * A special version of the `Card` type that omits the `id` field so that it can be
 * inserted with an auto-incremented `id`.
 */
export type CardCreatable = Omit<Card, "id" | "exhibitId">;
/**
 * A Zod object to represent `CardCreatable`
 */
export const CardCreatableSchema = CardSchema.omit({ 
    id: true, exhibitId: true 
});

/**
 * Used to represent a `PopulatedExhibit` without any `id` fields, so that it can be
 * created with auto-incremented `id`s.
 * 
 * E.g., given some `PopulatedExhibitCreatable` named `input`:
 * ```
 * const newExhibit: ExhibitCreatable = ExhibitCreatableSchema.parse(input);
 * const newCards: CardCreatable[] = z.array(ExhibitCreatableSchema).parse(input.cards);
 * 
 * const createdExhibit: PopulatedExhibit = await prisma.exhibit.create({
 *      data: {
 *          ...newExhibit,
 *          cards: { create: newCards }
 *      }
 * });
 * ```
 */
export type PopulatedExhibitCreatable = ExhibitCreatable & { cards: CardCreatable[] };
/**
 * A Zod object to represent a `PopulatedExhibitCreatable`
 */
export const PopulatedExhibitCreatableSchema = ExhibitCreatableSchema.extend({
    cards: z.array(CardCreatableSchema)
});